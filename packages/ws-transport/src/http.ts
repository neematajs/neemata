import { createMetadataKey } from '@nmtjs/core'
import { ErrorCode } from '@nmtjs/protocol/common'

export enum HttpCode {
  Continue = 100,
  SwitchingProtocols = 101,
  Processing = 102,
  EarlyHints = 103,
  OK = 200,
  Created = 201,
  Accepted = 202,
  NonAuthoritativeInformation = 203,
  NoContent = 204,
  ResetContent = 205,
  PartialContent = 206,
  MultiStatus = 207,
  AlreadyReported = 208,
  IMUsed = 226,
  MultipleChoices = 300,
  MovedPermanently = 301,
  Found = 302,
  SeeOther = 303,
  NotModified = 304,
  UseProxy = 305,
  TemporaryRedirect = 307,
  PermanentRedirect = 308,
  BadRequest = 400,
  Unauthorized = 401,
  PaymentRequired = 402,
  Forbidden = 403,
  NotFound = 404,
  MethodNotAllowed = 405,
  NotAcceptable = 406,
  ProxyAuthenticationRequired = 407,
  RequestTimeout = 408,
  Conflict = 409,
  Gone = 410,
  LengthRequired = 411,
  PreconditionFailed = 412,
  PayloadTooLarge = 413,
  URITooLong = 414,
  UnsupportedMediaType = 415,
  RangeNotSatisfiable = 416,
  ExpectationFailed = 417,
  ImATeapot = 418,
  MisdirectedRequest = 421,
  UnprocessableEntity = 422,
  Locked = 423,
  FailedDependency = 424,
  TooEarly = 425,
  UpgradeRequired = 426,
  PreconditionRequired = 428,
  TooManyRequests = 429,
  RequestHeaderFieldsTooLarge = 431,
  UnavailableForLegalReasons = 451,
  InternalServerError = 500,
  NotImplemented = 501,
  BadGateway = 502,
  ServiceUnavailable = 503,
  GatewayTimeout = 504,
  HTTPVersionNotSupported = 505,
  VariantAlsoNegotiates = 506,
  InsufficientStorage = 507,
  LoopDetected = 508,
  NotExtended = 510,
  NetworkAuthenticationRequired = 511,
}

export const HttpStatusText: Record<HttpCode, string> = {
  [HttpCode.Continue]: 'Continue',
  [HttpCode.SwitchingProtocols]: 'Switching Protocols',
  [HttpCode.Processing]: 'Processing',
  [HttpCode.EarlyHints]: 'Early Hints',
  [HttpCode.OK]: 'OK',
  [HttpCode.Created]: 'Created',
  [HttpCode.Accepted]: 'Accepted',
  [HttpCode.NonAuthoritativeInformation]: 'Non-Authoritative Information',
  [HttpCode.NoContent]: 'No Content',
  [HttpCode.ResetContent]: 'Reset Content',
  [HttpCode.PartialContent]: 'Partial Content',
  [HttpCode.MultiStatus]: 'Multi-Status',
  [HttpCode.AlreadyReported]: 'Already Reported',
  [HttpCode.IMUsed]: 'IM Used',
  [HttpCode.MultipleChoices]: 'Multiple Choices',
  [HttpCode.MovedPermanently]: 'Moved Permanently',
  [HttpCode.Found]: 'Found',
  [HttpCode.SeeOther]: 'See Other',
  [HttpCode.NotModified]: 'Not Modified',
  [HttpCode.UseProxy]: 'Use Proxy',
  [HttpCode.TemporaryRedirect]: 'Temporary Redirect',
  [HttpCode.PermanentRedirect]: 'Permanent Redirect',
  [HttpCode.BadRequest]: 'Bad Request',
  [HttpCode.Unauthorized]: 'Unauthorized',
  [HttpCode.PaymentRequired]: 'Payment Required',
  [HttpCode.Forbidden]: 'Forbidden',
  [HttpCode.NotFound]: 'Not Found',
  [HttpCode.MethodNotAllowed]: 'Method Not Allowed',
  [HttpCode.NotAcceptable]: 'Not Acceptable',
  [HttpCode.ProxyAuthenticationRequired]: 'Proxy Authentication Required',
  [HttpCode.RequestTimeout]: 'Request Timeout',
  [HttpCode.Conflict]: 'Conflict',
  [HttpCode.Gone]: 'Gone',
  [HttpCode.LengthRequired]: 'Length Required',
  [HttpCode.PreconditionFailed]: 'Precondition Failed',
  [HttpCode.PayloadTooLarge]: 'Payload Too Large',
  [HttpCode.URITooLong]: 'URI Too Long',
  [HttpCode.UnsupportedMediaType]: 'Unsupported Media Type',
  [HttpCode.RangeNotSatisfiable]: 'Range Not Satisfiable',
  [HttpCode.ExpectationFailed]: 'Expectation Failed',
  [HttpCode.ImATeapot]: "I'm a Teapot",
  [HttpCode.MisdirectedRequest]: 'Misdirected Request',
  [HttpCode.UnprocessableEntity]: 'Unprocessable Entity',
  [HttpCode.Locked]: 'Locked',
  [HttpCode.FailedDependency]: 'Failed Dependency',
  [HttpCode.TooEarly]: 'Too Early',
  [HttpCode.UpgradeRequired]: 'Upgrade Required',
  [HttpCode.PreconditionRequired]: 'Precondition Required',
  [HttpCode.TooManyRequests]: 'Too Many Requests',
  [HttpCode.RequestHeaderFieldsTooLarge]: 'Request Header Fields Too Large',
  [HttpCode.UnavailableForLegalReasons]: 'Unavailable For Legal Reasons',
  [HttpCode.InternalServerError]: 'Internal Server Error',
  [HttpCode.NotImplemented]: 'Not Implemented',
  [HttpCode.BadGateway]: 'Bad Gateway',
  [HttpCode.ServiceUnavailable]: 'Service Unavailable',
  [HttpCode.GatewayTimeout]: 'Gateway Timeout',
  [HttpCode.HTTPVersionNotSupported]: 'HTTP Version Not Supported',
  [HttpCode.VariantAlsoNegotiates]: 'Variant Also Negotiates',
  [HttpCode.InsufficientStorage]: 'Insufficient Storage',
  [HttpCode.LoopDetected]: 'Loop Detected',
  [HttpCode.NotExtended]: 'Not Extended',
  [HttpCode.NetworkAuthenticationRequired]: 'Network Authentication Required',
}

export const HttpCodeMap = {
  [ErrorCode.ValidationError]: HttpCode.BadRequest,
  [ErrorCode.BadRequest]: HttpCode.BadRequest,
  [ErrorCode.NotFound]: HttpCode.NotFound,
  [ErrorCode.Forbidden]: HttpCode.Forbidden,
  [ErrorCode.Unauthorized]: HttpCode.Unauthorized,
  [ErrorCode.InternalServerError]: HttpCode.InternalServerError,
  [ErrorCode.NotAcceptable]: HttpCode.NotAcceptable,
  [ErrorCode.RequestTimeout]: HttpCode.RequestTimeout,
  [ErrorCode.GatewayTimeout]: HttpCode.GatewayTimeout,
  [ErrorCode.ServiceUnavailable]: HttpCode.ServiceUnavailable,
  [ErrorCode.ClientRequestError]: HttpCode.BadRequest,
  [ErrorCode.ConnectionError]: HttpCode.NotAcceptable,
}

export const AllowedHttpMethod =
  createMetadataKey<Array<'get' | 'post'>>('http:method')
